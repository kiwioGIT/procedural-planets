[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;


uniform float ocean_surface_height;
varying float height;
varying float steepnes;
uniform float elevation;
uniform float elevation2;
uniform sampler2D noise_tex;

uniform sampler2D rock_tex;/*
uniform sampler2D rock_tex2;
uniform sampler2D rock_tex3;
uniform sampler2D rock_tex4;*/

uniform float rock_scale;

uniform float colorMixBias;
uniform float beach;
uniform sampler2D beachColor;
uniform float beachSteepness;
uniform float beachBlend;
uniform float sclampVal;
uniform vec3 blendColor;

uniform float mountain_height;
uniform vec4 mountainColor : hint_color;
uniform float mountainSteepness;
uniform float mountainBlend;
uniform float secretMountainBlendValue;

uniform float rock_bump_strenght;
uniform float steep_power;

uniform float mulColor;

uniform sampler2D groundTexture;
uniform float groundTextureScale;
uniform float groundTextureBias;

uniform float minBumpClamp = 0.0;
uniform float maxBumpClamp = 1.0;

uniform float smoothness = 1.0;

uniform vec3 light_normal = vec3(1.0,0.0,0.0);

uniform float scale : hint_range(0,2) = 1.0;
uniform float blendSharpness : hint_range(0,2) = 0.0;

uniform float rock_steep_bias;
uniform float rock_flat_barier;

varying vec3 nor;
varying vec3 vert;


uniform sampler2D gradient: hint_black;

vec3 blend_rnm(vec3 n1, vec3 n2)
{
	n1.z += 1.0;
	n2.xy = -n2.xy;

	return n1 * dot(n1, n2) / n1.z - n2;
}

vec3 unpack_normal(vec3 norm){
	return norm*2.0 - vec3(1.0,1.0,1.0);
}



vec3 triplanarNormal(vec3 vertPos, vec3 normal, vec3 nscale, vec2 offset, sampler2D normalMap) {
	vec3 absNormal = abs(normal);

	// Calculate triplanar blend
	vec3 blendWeight = clamp(normal*normal*normal*normal,0.0,1.0);
	// Divide blend weight by the sum of its components. This will make x + y + z = 1
	blendWeight /= dot(blendWeight, vec3(1.0));

	// Calculate triplanar coordinates
	vec2 uvX = vertPos.zy * nscale.x + offset;
	vec2 uvY = vertPos.xz * nscale.x + offset;
	vec2 uvZ = vertPos.xy * nscale.x + offset;

	// Sample tangent space normal maps
	// UnpackNormal puts values in range [-1, 1] (and accounts for DXT5nm compression)
	vec3 tangentNormalX = unpack_normal(texture(normalMap, uvX).xyz);
	vec3 tangentNormalY = unpack_normal(texture(normalMap, uvY).xyz);
	vec3 tangentNormalZ = unpack_normal(texture(normalMap, uvZ).xyz);

	// Swizzle normals to match tangent space and apply reoriented normal mapping blend
	tangentNormalX = blend_rnm(vec3(normal.zy, absNormal.x), tangentNormalX);
	tangentNormalY = blend_rnm(vec3(normal.xz, absNormal.y), tangentNormalY);
	tangentNormalZ = blend_rnm(vec3(normal.xy, absNormal.z), tangentNormalZ);

	// Apply input normal sign to tangent space Z
	vec3 axisSign = sign(normal);
	tangentNormalX.z *= axisSign.x;
	tangentNormalY.z *= axisSign.y;
	tangentNormalZ.z *= axisSign.z;

	// Swizzle tangent normals to match input normal and blend together
	vec3 outputNormal = normalize(
		tangentNormalX.zyx * blendWeight.x +
		tangentNormalY.xzy * blendWeight.y +
		tangentNormalZ.xyz * blendWeight.z
	);

	return outputNormal;
}


vec4 triplanar_texture(vec3 vertPos, vec3 normal, vec2 offset,float tripscale, sampler2D tex) {
	vec2 uvX = vertPos.zy * tripscale;
	vec2 uvY = vertPos.xz * tripscale;
	vec2 uvZ = vertPos.xy * tripscale;

	vec4 colX = texture(tex, uvX);
	vec4 colY = texture(tex, uvY);
	vec4 colZ = texture(tex, uvZ);
	// Square normal to make all values positive + increase blend sharpness
	vec3 blendWeight = normal * normal;
	// Divide blend weight by the sum of its components. This will make x + y + z = 1
	blendWeight /= dot(blendWeight, vec3(1.0));
	return colX * blendWeight.x + colY * blendWeight.y + colZ * blendWeight.z;
}

vec3 lerp(vec3 v0,vec3 v1,float t)
	{
		return (1.0 - t) * v0 + t * v1;
	}

void vertex()
	{
		
		nor = NORMAL;
		vert = VERTEX;
		steepnes = dot(NORMAL,VERTEX);
		
		height = length((vec4(vert,0)*WORLD_MATRIX).xyz) - ocean_surface_height;
		
	}

float scalmp(float f,float sc){
	return clamp(((f-0.5)*sc)+0.5,0.0,1.0);
}

void fragment()
{
	float trip = 1.0;//triplanar_texture(vert,nor,vec2(0.0,0.0),noise_tex).x + colorMixBias;
	//ALBEDO = vec3(height,0.0,0.0); texture(gradient,vec2(dot(normalize(vert),nor),0)).rgb *
	float steep = dot(normalize(vert),normalize(nor));
	vec3 col = texture(gradient,vec2(steep,0)).rgb;
	
	
	col = mulColor*mix(col,blendColor,clamp(triplanar_texture(vert,nor,vec2(0.0),groundTextureScale,groundTexture).x+groundTextureBias,0.0,1.0));
	//ALBEDO = col*trip;
	//ALBEDO = mix(col,blendColor,scalmp(trip,sclampVal));
	vec3 bump = triplanarNormal(vert,nor,vec3(scale),vec2(0.0),noise_tex);
	
	vec3 rock_bump = triplanarNormal(vert,nor,vec3(rock_scale),vec2(0.0),rock_tex);
	/*vec3 rock_bump2 = triplanarNormal(vert,nor,vec3(rock_scale),vec2(0.0),rock_tex2);
	vec3 rock_bump3 = triplanarNormal(vert,nor,vec3(rock_scale),vec2(0.0),rock_tex3);
	vec3 rock_bump4 = triplanarNormal(vert,nor,vec3(rock_scale),vec2(0.0),rock_tex4);*/
	
	/*vec3 rbum  = (rock_bump+rock_bump2+rock_bump3+rock_bump4)/vec3(4.0);*/
	
	bump = mix(rock_bump*rock_bump_strenght,bump,clamp(pow(steep+rock_steep_bias,steep_power),0.0,1.0));
	
	ALBEDO = col*dot(mix(nor,bump,smoothness),light_normal);
	//ALBEDO = triplanar_texture(vert,nor,vec2(0.0),noise_tex).xyz;
	

	ALBEDO = mix(texture(beachColor,vec2(steep*beachSteepness,0)).xyz,ALBEDO,clamp(height*(1.0/steep)*beachBlend,0.0,1.0));
	if (height > mountain_height && steep < mountainSteepness){
		ALBEDO = mix(mountainColor.xyz,ALBEDO,clamp((secretMountainBlendValue*steep/height)*mountainBlend,0.0,1.0));
	}
	
	
	//ALBEDO = vec3(nor.x,nor.y,nor.z);
}

void light(){
}"

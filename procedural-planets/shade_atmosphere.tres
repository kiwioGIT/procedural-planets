[gd_resource type="Shader" format=2]

[resource]
code = "shader_type spatial;

render_mode unshaded, depth_test_disable;

uniform sampler2D atmos_grad;

varying vec3 cam_pos;

uniform sampler2D noiseB;

uniform vec3 planet_pos = vec3(0.0,0.0,0.0);
uniform float planet_radius = 600;
uniform vec3 light_normal = vec3(1.0,0.0,0.0); 


varying mat4 cam;

vec3 unpack_normal(vec3 nor){ //Pomatujte na toto posvátné místo kde pavel strávil 2 hodiny než pochopil že tam musí dát tady tohle
	return nor*2.0 - vec3(1.0,1.0,1.0);
}


vec3 blend_rnm(vec3 n1, vec3 n2)
{
	n1.z += 1.0;
	n2.xy = -n2.xy;

	return n1 * dot(n1, n2) / n1.z - n2;
}

vec3 triplanarNormal(vec3 vertPos, vec3 normal, float nscale, vec2 offset, sampler2D normalMap) {
	vec3 absNormal = abs(normal);

	// Calculate triplanar blend
	vec3 blendWeight = clamp(normal*normal*normal*normal,0.0,1.0);
	// Divide blend weight by the sum of its components. This will make x + y + z = 1
	blendWeight /= dot(blendWeight, vec3(1.0));

	// Calculate triplanar coordinates
	vec2 uvX = vertPos.zy * nscale + offset;
	vec2 uvY = vertPos.xz * nscale + offset;
	vec2 uvZ = vertPos.xy * nscale + offset;

	// Sample tangent space normal maps
	// UnpackNormal puts values in range [-1, 1] (and accounts for DXT5nm compression)
	vec3 tangentNormalX = unpack_normal(texture(normalMap, uvX).xyz);
	vec3 tangentNormalY = unpack_normal(texture(normalMap, uvY).xyz);
	vec3 tangentNormalZ = unpack_normal(texture(normalMap, uvZ).xyz);

	// Swizzle normals to match tangent space and apply reoriented normal mapping blend
	tangentNormalX = blend_rnm(vec3(normal.zy, absNormal.x), tangentNormalX);
	tangentNormalY = blend_rnm(vec3(normal.xz, absNormal.y), tangentNormalY);
	tangentNormalZ = blend_rnm(vec3(normal.xy, absNormal.z), tangentNormalZ);

	// Apply input normal sign to tangent space Z
	vec3 axisSign = sign(normal);
	tangentNormalX.z *= axisSign.x;
	tangentNormalY.z *= axisSign.y;
	tangentNormalZ.z *= axisSign.z;

	// Swizzle tangent normals to match input normal and blend together
	vec3 outputNormal = normalize(
		tangentNormalX.zyx * blendWeight.x +
		tangentNormalY.xzy * blendWeight.y +
		tangentNormalZ.xyz * blendWeight.z
	);

	return outputNormal;
}






vec4 triplanar_texture(vec3 position, vec3 normal, vec2 offset, sampler2D noise_,float scale) {
	vec4 colX = texture(noise_, position.xy * scale + offset);
	vec4 colY = texture(noise_, position.xz * scale + offset);
	vec4 colZ = texture(noise_, position.zy * scale + offset);
	
	vec3 blendWeight = abs(normal);
	blendWeight = normalize(max(blendWeight, 0.00001)); 
	float b = (blendWeight.x + blendWeight.y + blendWeight.z);
	blendWeight /= vec3(b, b, b);
	return colX * blendWeight.x + colY * blendWeight.y + colZ * blendWeight.z;
	
	}



vec2 ray_sphere(vec3 centre, float radius, vec3 rayPos, vec4 rayDir0){
	vec3 rayDir = rayDir0.xyz; 
	rayDir = normalize(rayDir);
	
	vec3 offset = rayPos - centre;
	float a = 1.0;
	
	float b = 2.0*dot(offset,rayDir);
	float c = dot(offset,offset)-(radius*radius);
	
	float discriminant = (b*b)-(4.0*a*c);
	if (discriminant > 0.0){
		float s = sqrt(discriminant);
		float distToSphereNear = max(0,(-b-s)/(2.0*a));
		float distTosphereFar = (-b+s)/(2.0*a);
		if (distTosphereFar >=0.0){
			return vec2(distToSphereNear,distTosphereFar-distToSphereNear);
		}
		
	}
	else{
		return vec2(-1.0,0.0);
		}
	
}


vec3 matMulltip(mat4 mat,vec3 vec){
	return vec4(vec4(vec,0.0) * mat).xyz;
	}


void fragment(){

	ALPHA = 0.0;
	float depth = texture(DEPTH_TEXTURE, SCREEN_UV).x;
	vec3 ndc = vec3(SCREEN_UV, depth) * 2.0 - 1.0;
	vec4 view = INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
	view.xyz /= view.w;
	float linear_depth = -view.z;
	vec4 world = cam * INV_PROJECTION_MATRIX * vec4(ndc, 1.0);
  	vec3 world_position = world.xyz / world.w;
	
	vec4 view_ = INV_PROJECTION_MATRIX * vec4(vec3(SCREEN_UV, 0.0), 1.0);
	vec3 viewNormal = normalize(cam*vec4(view.xyz,0)).xyz;
	
	vec2 hit_atmo = ray_sphere(vec3(0.0,0.0,0.0),planet_radius+200.0,cam_pos,cam*vec4(view.xyz,0));
	vec2 hit_ocean = ray_sphere(vec3(0.0,0.0,0.0),planet_radius,cam_pos,cam*vec4(view.xyz,0));
	float dist_trough_atmosphere = min(hit_atmo.y,length(-world_position+cam_pos)-hit_atmo.x);
	if (hit_ocean.y > 0.0){
		dist_trough_atmosphere = min(dist_trough_atmosphere,hit_ocean.x - hit_atmo.x);
	}
	vec3 on_atmo_pos = cam_pos + viewNormal * hit_atmo.x;
	vec3 atmo_surface_normal = normalize(on_atmo_pos - planet_pos);
	if (dist_trough_atmosphere > 0.0){
		ALPHA = pow(dist_trough_atmosphere*0.05,1.8)*0.0003*min(1.0,dot(atmo_surface_normal,light_normal)*0.7+0.3) * 1.0;
		ALBEDO = texture(atmos_grad,vec2(dot(atmo_surface_normal,light_normal),0.0)).xyz;
	}
	
	
}




void vertex() {
	cam = CAMERA_MATRIX;
	cam_pos = (CAMERA_MATRIX * vec4(0.0, 0.0, 0.0, 1.0)).xyz;
	//POSITION = vec4(VERTEX, 1.0);
}


"
